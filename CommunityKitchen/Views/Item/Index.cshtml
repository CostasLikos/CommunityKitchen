@model PagedList.IPagedList<Entities.Item>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />



@{
    ViewBag.Title = "Index";
}

<div style="margin-top:118px!important;" class="container p-2">
    <div class="row d-flex justify-content-around m-3">
        <div>
            <button style="width:150px!important;" class="btn size5 btn-warning col-12 align-self-center" onclick="location.href='@Url.Action("Create", "Item")'">Add New Item</button>
        </div>

        @using (Html.BeginForm())
        {
            <div class="row">

                <div class="px-1">
                    @Html.TextBox("SearchString")
                </div>
                <div>
                    <input class="btn btn-block" type="submit" value="Search" />
                </div>
            </div>
        }


    </div>
    <table id="table" class="table table-hover table-striped ml-5">

        <tr>
            <th class="col-3" style="text-align:left">
                @Html.ActionLink("Item Name", "Index", new { sortOrder = ViewBag.NameSortParm })

            </th>
            <th class="col-1" style="text-align:center">
                @Html.ActionLink("Price", "Index", new { sortOrder = ViewBag.PriceSortParm })
            </th>
            <th class="col-1" style="text-align:center">
                @Html.ActionLink("Quantity", "Index", new { sortOrder = ViewBag.QSortParm })
            </th>
            <th class="col-1" style="text-align:center">
                Update Quantity
            </th>
            <th class="col-1" style="text-align:center">
                Actions
            </th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td class="col-3">
                    @Html.DisplayFor(modelItem => item.ItemName)
                </td>
                <td class="col-1" style="text-align:center">
                    @Html.DisplayFor(modelItem => item.Price)
                </td>


                <td class="col-1" style="text-align:center">
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
                <td class="col-1" style="text-align:center">
                    <button style="width:40px;" class="btn btn-success" onclick="location.href='@Url.Action("AddQuantity", "Item", new { id = item.Id })'">+</button>
                    <button style="width:40px;" class="btn btn-outline-success" onclick="location.href='@Url.Action("RemoveQuantity", "Item", new { id = item.Id })'">-</button>
                </td>
                <td class="col-1" style="text-align:center">
                    <button class="btn btn-danger mb-1" onclick="location.href='@Url.Action("Delete", "Item", new { id = item.Id })'">Delete</button>
                    <button id="editBtn" class="btn btn-primary editBtn mb-1">Edit</button>
                    <button id="saveBtn" class="btn btn-warning saveBtn mb-1" style="visibility:hidden"> Save </button>

                    <button id="itemId" style="visibility:hidden" value="@item.Id"></button>
                </td>
            </tr>

        }

    </table>
    <br />
    <div class="ourPaging">
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

        @Html.PagedListPager(Model, page => Url.Action("Index",
            new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
    </div>
</div>

@section scripts{
    <script>
        $('.editBtn').on('click', function (event) {
            let row = event.currentTarget.parentElement.parentElement.rowIndex //the row index is needed for toggling individual rows "save" button

            event.currentTarget.parentElement.parentElement.children[0].setAttribute("contenteditable", true);
            event.currentTarget.parentElement.parentElement.children[1].setAttribute("contenteditable", true);

            showSaveButton(row);

        })

        $('.saveBtn').on('click', function (event) {
            let row = event.currentTarget.parentElement.parentElement.rowIndex;

            let itemID = event.currentTarget.parentElement.parentElement.children[4].children[3].value;

            let newName = event.currentTarget.parentElement.parentElement.children[0].innerText;
            let newPrice = event.currentTarget.parentElement.parentElement.children[1].innerText;
            newPrice = newPrice.substring(1);

            console.log(newName.toString());
            console.log(newPrice);

            event.currentTarget.parentElement.parentElement.children[0].setAttribute("contenteditable", false);
            event.currentTarget.parentElement.parentElement.children[1].setAttribute("contenteditable", false);

            $.ajax({
                    type: "put",
                    url: "@Url.Action("EditItemJson","Item")",
                    data: JSON.stringify({ "id": itemID, "name": newName, "price": newPrice }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function () {
                        console.log(" ****** to console log den douleyei edw pera ... kai oute kai to alert aop katw ^^^^^")
                        alert("Successfully Edite Item");
                    },
                    failure: function () {
                        alert("Did not save");
                    }
            });
            hideSaveButton(row);
        });



        function showSaveButton(row) {

            let table = document.getElementById("table");
            table.rows[row].children[4].children[2].setAttribute("style", "visibility: visible");

            table.rows[row].setAttribute("style","border: 2px solid black;");
        }

        function hideSaveButton(row) {
            let table = document.getElementById("table");
            table.rows[row].children[4].children[2].setAttribute("style", "visibility: hidden");

            table.rows[row].setAttribute("style", "border: none");
        }

        function saveValues() {

        }

    </script>

}
